CREATE TABLE USERS
(
	USER_ID NUMBER,
	FIRST_NAME VARCHAR2(100) NOT NULL,
	LAST_NAME VARCHAR2(100) NOT NULL,
	YEAR_OF_BIRTH INT,
	MONTH_OF_BIRTH INT,
	DAY_OF_BIRTH INT,
	GENDER VARCHAR2(100),
	PRIMARY KEY (USER_ID)
);

CREATE TABLE FRIENDS
(
	USER1_ID NUMBER,
	USER2_ID NUMBER,
	PRIMARY KEY (USER1_ID,USER2_ID),
	FOREIGN KEY (USER1_ID) REFERENCES USERS(USER_ID),
	FOREIGN KEY (USER2_ID) REFERENCES USERS(USER_ID)
);

-- CREATE TRIGGER
CREATE TRIGGER friendship_trigger
BEFORE INSERT ON FRIENDS
FOR EACH ROW
DECLARE TEMP NUMBER;
BEGIN
IF :new.USER1_ID > :new.USER2_ID THEN
	TEMP := :new.USER1_ID;
	:new.USER1_ID := :new.USER2_ID;
	:new.USER2_ID :=TEMP;
END IF;
END;
.
RUN;

CREATE TABLE CITIES
(
	CITY_ID INT,
	CITY_NAME VARCHAR2(100),--ADD NOT NULL ?
	STATE_NAME VARCHAR2(100),
	COUNTRY_NAME VARCHAR2(100),
	PRIMARY KEY (CITY_ID),
	CHECK (CITY_NAME IS NOT NULL OR STATE_NAME IS NOT NULL OR COUNTRY_NAME IS NOT NULL)
);	

CREATE SEQUENCE city_sequence
START WITH 1
INCREMENT BY 1;

CREATE TRIGGER city_trigger
BEFORE INSERT ON CITIES
FOR EACH ROW
BEGIN
SELECT city_sequence.nextval into :new.CITY_ID from dual;
END;
.
RUN;

CREATE TABLE USER_CURRENT_CITY
(
	USER_ID NUMBER,
	CURRENT_CITY_ID INT,
	PRIMARY KEY (USER_ID),
	--PRIMARY KEY (USER_ID,CURRENT_CITY_ID),
	FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
	FOREIGN KEY (CURRENT_CITY_ID) REFERENCES CITIES(CITY_ID)
);

CREATE TABLE USER_HOMETOWN_CITY
(
	USER_ID NUMBER,
	HOMETOWN_CITY_ID INT,
	PRIMARY KEY (USER_ID),
	--PRIMARY KEY (USER_ID,HOMETOWN_CITY_ID),
	FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
	FOREIGN KEY (HOMETOWN_CITY_ID) REFERENCES CITIES(CITY_ID)
);

CREATE TABLE MESSAGE
(
	MESSAGE_ID INT,
	SENDER_ID NUMBER NOT NULL,
	RECEIVER_ID NUMBER NOT NULL,
	MESSAGE_CONTENT VARCHAR2(100),
	SENT_TIME TIMESTAMP,
	PRIMARY KEY (MESSAGE_ID),
	FOREIGN KEY (SENDER_ID) REFERENCES USERS(USER_ID),
	FOREIGN KEY (RECEIVER_ID) REFERENCES USERS(USER_ID)
);

CREATE TABLE PROGRAMS
(
	PROGRAM_ID INT,
	INSTITUTION VARCHAR2(100),
	CONCENTRATION VARCHAR2(100),	
	DEGREE VARCHAR2(100),
	PRIMARY KEY(PROGRAM_ID),
	CHECK (INSTITUTION IS NOT NULL OR CONCENTRATION IS NOT NULL OR DEGREE IS NOT NULL)
);

CREATE SEQUENCE program_sequence
START WITH 1
INCREMENT BY 1;

CREATE TRIGGER program_trigger
BEFORE INSERT ON PROGRAMS
FOR EACH ROW
BEGIN
SELECT program_sequence.nextval into :new.PROGRAM_ID from dual;
END;
.
RUN;

CREATE TABLE EDUCATION
(
	USER_ID NUMBER,
	PROGRAM_ID INT,
	PROGRAM_YEAR INT,
	PRIMARY KEY (USER_ID,PROGRAM_ID),
	FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
	FOREIGN KEY (PROGRAM_ID) REFERENCES PROGRAMS(PROGRAM_ID)
);

CREATE TABLE USER_EVENTS
(
	EVENT_ID NUMBER,
	EVENT_CREATOR_ID NUMBER NOT NULL,
	EVENT_NAME VARCHAR2(100),
	EVENT_TAGLINE VARCHAR2(100),
	EVENT_DESCRIPTION VARCHAR2(100),
	EVENT_HOST VARCHAR2(100),
	EVENT_TYPE VARCHAR2(100) NOT NULL,
	EVENT_SUBTYPE VARCHAR2(100) NOT NULL,
	EVENT_LOCATION VARCHAR2(100),
	EVENT_CITY_ID INT,
	EVENT_START_TIME TIMESTAMP,
	EVENT_END_TIME TIMESTAMP,
	PRIMARY KEY (EVENT_ID),
	FOREIGN KEY (EVENT_CREATOR_ID) REFERENCES USERS(USER_ID),
	FOREIGN KEY (EVENT_CITY_ID) REFERENCES CITIES(CITY_ID)
);

CREATE TABLE PARTICIPANTS
(
	EVENT_ID NUMBER,
	USER_ID NUMBER,
	CONFIRMATION VARCHAR2(100) NOT NULL,
	PRIMARY KEY (EVENT_ID,USER_ID),
	FOREIGN KEY (EVENT_ID) REFERENCES USER_EVENTS(EVENT_ID),
 	FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
 	-- check conformation
 	CHECK ( CONFIRMATION IN ('attending','declined','unsure','not-replied')) --IS THIS CORRECT?
);

CREATE TABLE ALBUMS
(
	ALBUM_ID VARCHAR2(100),
	ALBUM_OWNER_ID NUMBER NOT NULL,
	ALBUM_NAME VARCHAR2(100),
	ALBUM_CREATED_TIME TIMESTAMP,
	ALBUM_MODIFIED_TIME TIMESTAMP,
	ALBUM_LINK VARCHAR2(100),
	ALBUM_VISIBILITY VARCHAR2(100) NOT NULL,
	COVER_PHOTO_ID VARCHAR2(100),
	PRIMARY KEY (ALBUM_ID),
	FOREIGN KEY (ALBUM_OWNER_ID) REFERENCES USERS(USER_ID)
);

CREATE TABLE PHOTOS
(
	PHOTO_ID VARCHAR2(100),
	ALBUM_ID VARCHAR2(100) NOT NULL,
	PHOTO_CAPTION VARCHAR2(2000),
	PHOTO_CREATED_TIME TIMESTAMP,
	PHOTO_MODIFIED_TIME TIMESTAMP,
	PHOTO_LINK VARCHAR2(100),
	PRIMARY KEY (PHOTO_ID),
	FOREIGN KEY (ALBUM_ID) REFERENCES ALBUMS(ALBUM_ID)
);

-- Add delayed foreign key here
ALTER TABLE ALBUMS 
ADD CONSTRAINT COVER_CONSTRAINT
FOREIGN KEY(COVER_PHOTO_ID) REFERENCES PHOTOS(PHOTO_ID) DEFERRABLE;

SET CONSTRAINT COVER_CONSTRAINT DEFERRED;


CREATE TABLE TAGS
(
	TAG_PHOTO_ID VARCHAR2(100) NOT NULL,
	TAG_SUBJECT_ID NUMBER NOT NULL, 
	TAG_CREATED_TIME TIMESTAMP,
	TAG_X NUMBER NOT NULL,
	TAG_Y NUMBER NOT NULL,
	PRIMARY KEY (TAG_PHOTO_ID,TAG_SUBJECT_ID),
	FOREIGN KEY (TAG_PHOTO_ID) REFERENCES PHOTOS(PHOTO_ID),
	FOREIGN KEY (TAG_SUBJECT_ID) REFERENCES USERS(USER_ID)
);

