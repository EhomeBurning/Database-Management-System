SET CONSTRAINT COVER_CONSTRAINT DEFERRED;

-- INSERT INTO USERS
INSERT INTO USERS
SELECT DISTINCT USER_ID, 
				FIRST_NAME, 
				LAST_NAME, 
				YEAR_OF_BIRTH, 
				MONTH_OF_BIRTH, 
				DAY_OF_BIRTH, 
				GENDER
FROM weile.PUBLIC_USER_INFORMATION;

-- INSERT INTO FRIENDS

INSERT INTO FRIENDS
SELECT DISTINCT USER1_ID,
				USER2_ID
FROM weile.PUBLIC_ARE_FRIENDS;

-- INSERT INTO CITIES
INSERT INTO CITIES(CITY_NAME,STATE_NAME,COUNTRY_NAME)
SELECT DISTINCT HOMETOWN_CITY,
				HOMETOWN_STATE,
				HOMETOWN_COUNTRY
FROM weile.PUBLIC_USER_INFORMATION
WHERE (HOMETOWN_CITY IS NOT NULL OR HOMETOWN_STATE IS NOT NULL OR HOMETOWN_COUNTRY IS NOT NULL)
UNION 
SELECT DISTINCT CURRENT_CITY,
				CURRENT_STATE,
				CURRENT_COUNTRY
FROM weile.PUBLIC_USER_INFORMATION
WHERE (CURRENT_CITY IS NOT NULL OR CURRENT_STATE IS NOT NULL OR CURRENT_COUNTRY IS NOT NULL)
UNION 
SELECT DISTINCT EVENT_CITY,
				EVENT_STATE,
				EVENT_COUNTRY
FROM weile.PUBLIC_EVENT_INFORMATION
WHERE (EVENT_CITY IS NOT NULL OR EVENT_STATE IS NOT NULL OR EVENT_COUNTRY IS NOT NULL);

-- INSERT INTO USER_CURRENT_CITY

INSERT INTO USER_CURRENT_CITY(USER_ID,CURRENT_CITY_ID)
SELECT DISTINCT P.USER_ID,
				C.CITY_ID
FROM weile.PUBLIC_USER_INFORMATION P  
LEFT JOIN CITIES C ON P.CURRENT_CITY = C.CITY_NAME AND P.CURRENT_STATE = C.STATE_NAME AND P.CURRENT_COUNTRY = C.COUNTRY_NAME;
-- left or inner ? and or or ?

-- INSERT INTO USER_HOMETOWN_CITY

INSERT INTO USER_HOMETOWN_CITY(USER_ID,HOMETOWN_CITY_ID)
SELECT DISTINCT P.USER_ID,
				C.CITY_ID
FROM weile.PUBLIC_USER_INFORMATION P  
LEFT JOIN CITIES C ON P.HOMETOWN_CITY = C.CITY_NAME AND P.HOMETOWN_STATE = C.STATE_NAME AND P.HOMETOWN_COUNTRY = C.COUNTRY_NAME;

-- INSERT INTO MESSAGE
-- NO NEED TO INSERT FROM PUBLIC DATA

-- INSERT INTO PROGRAMS

INSERT INTO PROGRAMS(INSTITUTION,CONCENTRATION,DEGREE)
SELECT DISTINCT INSTITUTION_NAME,
				PROGRAM_CONCENTRATION,
				PROGRAM_DEGREE
FROM weile.PUBLIC_USER_INFORMATION
WHERE (INSTITUTION_NAME IS NOT NULL OR PROGRAM_CONCENTRATION IS NOT NULL OR PROGRAM_DEGREE IS NOT NULL);

-- INSERT INTO EDUCATION

INSERT INTO EDUCATION(USER_ID,PROGRAM_ID,PROGRAM_YEAR)
SELECT DISTINCT P.USER_ID,
				R.PROGRAM_ID,
				P.PROGRAM_YEAR
FROM weile.PUBLIC_USER_INFORMATION P INNER JOIN PROGRAMS R  -- don't record people without education records
ON P.INSTITUTION_NAME = R.INSTITUTION AND P.PROGRAM_CONCENTRATION = R.CONCENTRATION AND P.PROGRAM_DEGREE = R.DEGREE;

-- INSERT INTO USER_EVENTS

INSERT INTO USER_EVENTS
SELECT DISTINCT P.EVENT_ID,
				P.EVENT_CREATOR_ID,
				P.EVENT_NAME,
				P.EVENT_TAGLINE,
				P.EVENT_DESCRIPTION,
				P.EVENT_HOST,
				P.EVENT_TYPE,
				P.EVENT_SUBTYPE,
				P.EVENT_LOCATION,
				C.CITY_ID,
				P.EVENT_START_TIME,
				P.EVENT_END_TIME
FROM weile.PUBLIC_EVENT_INFORMATION P LEFT JOIN CITIES C 
ON P.EVENT_CITY = C.CITY_NAME AND P.EVENT_STATE = C.STATE_NAME AND P.EVENT_COUNTRY = C.COUNTRY_NAME; 

-- INSERT INTO PARTICIPANTS
-- NO NEED TO INSERT FROM PUBLIC DATA

--INSERT INTO ALBUMS

INSERT INTO ALBUMS(ALBUM_ID,ALBUM_OWNER_ID,ALBUM_NAME,ALBUM_CREATED_TIME,ALBUM_MODIFIED_TIME,ALBUM_LINK,ALBUM_VISIBILITY,COVER_PHOTO_ID)
SELECT DISTINCT ALBUM_ID,
				OWNER_ID,
				ALBUM_NAME,
				ALBUM_CREATED_TIME,
				ALBUM_MODIFIED_TIME,
				ALBUM_LINK,
				ALBUM_VISIBILITY,
				COVER_PHOTO_ID
FROM weile.PUBLIC_PHOTO_INFORMATION;

--INSERT INTO PHOTOS

INSERT INTO PHOTOS(PHOTO_ID,ALBUM_ID,PHOTO_CAPTION,PHOTO_CREATED_TIME,PHOTO_MODIFIED_TIME,PHOTO_LINK)
SELECT DISTINCT PHOTO_ID,
				ALBUM_ID,
				PHOTO_CAPTION,
				PHOTO_CREATED_TIME,
				PHOTO_MODIFIED_TIME,
				PHOTO_LINK
FROM weile.PUBLIC_PHOTO_INFORMATION;

--INSERT INTO TAGS

INSERT INTO TAGS(TAG_PHOTO_ID,TAG_SUBJECT_ID,TAG_CREATED_TIME,TAG_X,TAG_Y)
SELECT PHOTO_ID,
	   TAG_SUBJECT_ID,
	   TAG_CREATED_TIME,
	   TAG_X_COORDINATE,
	   TAG_Y_COORDINATE
FROM weile.PUBLIC_TAG_INFORMATION;
